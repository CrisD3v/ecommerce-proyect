const { Products } = require("../App/Db");
const { productServices } = require("../Services/Products.services");
const {
  productValidation,
} = require("../Utils/Validaciones/DataValidate.helper");
const { validate } = require("../Utils/Validaciones/Data.utils");

function generateRandomCode(length) {
  const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  let result = "";
  for (let i = 0; i < length; i++) {
    result += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return result;
}

const productController = {
  postProduct: async (req, res) => {
    console.log(req.body);
    try {
      const validateData = await validate(
        req.body,
        Products,
        productValidation
      );
      if (validateData.length > 0)
        res.status(404).json({ error: validateData });
      else {
        let { name, description, price, stock, code, category, subCategory } =
          req.body;
        const image = req.file.filename;
        const active = true;
        if (code.leng <= 0 || !code) {
          const currentDate = new Date();
          const year = String(currentDate.getFullYear()).slice(-2); // Tomar solo los últimos 2 dígitos del año
          const month = String(currentDate.getMonth() + 1).padStart(2, "0"); // Agregar cero al principio si el mes es menor que 10
          const day = String(currentDate.getDate()).padStart(2, "0"); // Agregar cero al principio si el día es menor que 10
          const randomCodeLength = 14 - 5 - 6;
          const randomCode = generateRandomCode(randomCodeLength); // Generar una cadena aleatoria de longitud específica
          let codeAutoGenerated = `${year}${month}${day}-${randomCode}`;
          code = codeAutoGenerated.slice(0, 14);
        }

        console.log(subCategory);

        const dataProduct = await productServices.createProducts(
          name,
          description,
          price,
          stock,
          image,
          code,
          active,
          category,
          subCategory
        );

        res.status(200).json(dataProduct);
      }
    } catch (error) {
      console.log(error);
      res.status(500).json({ error: error.message });
    }
  },

  updateProduct: async (req, res) => {
    console.log(req.body.name);
    try {
      const { name, description, price, stock, category, subCategory } =
        req.body;
      let image 
      if (req.file) {
        image = req.file.filename;
      }

      const { id } = req.params;

      const dataProduct = await productServices.updateProducts(
        name,
        description,
        price,
        stock,
        image,
        category,
        subCategory,
        id
      );

      res.status(200).json(dataProduct);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },

  deleteProduct: async (req, res) => {
    const { state } = req.body;
    const { id } = req.params;
    try {
      const deleteProduct = await productServices.deleteProducts(id, state);
      res.status(200).json(deleteProduct);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },

  getDataProducts: async (req, res) => {
    try {
      const products = await productServices.getProducts();
      res.status(200).json(products);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },

  findDataProducts: async (req, res) => {
    const { code, name } = req.body;
    try {
      const findProduct = await productServices.findProducts(code, name);
      res.status(200).json(findProduct);
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  },
};

module.exports = productController;
